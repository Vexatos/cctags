local args = { ... }

local reader_side = args[1]
if not reader_side then
    print("Usage: reader <peripheral side>, [<move forward on start = true>], [<max security level = 3>]")
    return
end

--TODO: Get better
local forward_start = not ((args[2] == '0') or (args[2] == 'false'))

local workEnv = tags.setup_env()

if reader_side == 'print' then
    local w,h = term.getSize()
    local s = {}
    for k,_ in pairs(workEnv) do
        table.insert(s, k)
    end
    
    print(table.concat(s, ','))
    return
end

workEnv["reader"] = reader_side

if forward_start then
    if not turtle.forward() then
        error("Can't move forward")
    end
end

workEnv.prev = function() end
workEnv.step = 0

local postamble = tags.stack(function() end)
workEnv.pushPostamble = postamble.push
workEnv.popPostamble = postamble.pop

function workEnv.pausePostamble() 
    local p = postamble.pop()
    postamble.push(function () end)
    p()
end

workEnv._counters = {}

local finished = false
local lastSerial = 0

function workEnv.stop() 
    finished = true
    postamble.clear()
    print("stop(): finished")
end

local executors = {}
local executor = nil
workEnv.special = {}
local controlActions = {}

local function addSpecial(name, fun)
    workEnv.special[name] = fun
    controlActions['!' .. name] = fun
end

local function createExecutorReplacer(name, fun)
    addSpecial(name, function()
        executor = fun
    end)    
end

function executors.simple(fun, contents)
    print(string.format("Step %d: executing: '%s'", workEnv.step, contents))
    return pcall(fun)
end
createExecutorReplacer('restore', executors.simple)

function executors.dummy(fun, contents)
    print(string.format("Step %d: ignoring: '%s'", workEnv.step, contents))
    return true
end
createExecutorReplacer('pause', executors.dummy)

function executors.singleSkip(fun, contents)
    print(string.format("Step %d: ignoring: '%s'", workEnv.step, contents))
    executor = executors.simple
    return true
end
createExecutorReplacer('skip', executors.singleSkip)

local function createSavingExecutor(execute)
    local result = {}
    
    setmetatable(result, {
        __call = function(self, fun, contents)
            print(string.format("Step %d: storing: '%s'", workEnv.step, contents))
            table.insert(self, function() print("Macro call:" .. tostring(contents)) end)
            table.insert(self, fun)
            
            if execute then
                return pcall(fun)
            end
            
            return true
        end
    })
    
    return result
end
createExecutorReplacer('record', createSavingExecutor(false))
createExecutorReplacer('record_execute', createSavingExecutor(true))

executor = executors.simple

addSpecial('save', function()
    if type(executor) ~= 'table' then
        error("Trying to 'save' without calling 'record'") 
    end

    local macro = executor
    executor = executors.simple
   
    local function callMacro()
        for i,v in ipairs(macro) do
            v()
        end
    end
   
    workEnv._args.push(callMacro)
end)

workEnv.readTags = true
workEnv.ignoreMissing = false

if fs.exists("follow-env") then
    print("Found 'follow-env', executing")
    if not os.run(workEnv, "follow-env") then
        error("Invalid 'follow-env'")
    end
end

while not finished do
    workEnv.step = workEnv.step + 1
    if workEnv.readTags then
        dir, contents, _, _, serial = tags.scanForTags(reader_side)
        
        if not dir then
            if not workEnv.ignoreMissing then
                error("No tag found")
            else
                print(string.format("Step %d: no tag, calling only postamble", workEnv.step))
            end
        else
            if serial == lastSerial then
                error("Tag " .. serial .. " was read twice in row")
            end
            
            lastSerial = serial
         
            workEnv.tagDir = dir
            workEnv.serial = serial
            
            local updatePrev = true
            
            function workEnv.holdPrev()
                updatePrev = false
            end 
            
            local action = controlActions[contents]
            if action then
                action()
                print(string.format("Step %d: command '%s'", workEnv.step, contents))
            else 
                local operation, e = loadstring(contents)
                if not operation then
                    error(string.format("Invalid operation, error: '%s'", operation, err))
                end
                
                setfenv(operation, workEnv)
                local status, result = executor(operation, contents)
                
                if not status then
                    error("Error during command execution: " .. result)
                end
                
                if updatePrev then
                    workEnv.prev = operation
                end
                
                if result then
                    print(string.format("Step %d: result: '%s'", workEnv.step, tostring(result)))
                end
            end
        end
    end
    
    postamble.top()()
end