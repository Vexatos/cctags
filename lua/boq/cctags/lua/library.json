[
    {
        "name" : "move",
        "icon" : "forward",
        "notes" : " 'forward', 'back', 'down', 'up' will move turtle in one direction until new tag is found.\n'pushPostamble(function)' will make argument execute after any code from tag. Previous value is saved and can be restored with 'popPostamble'",
        "tags" :
        [        
            {
                "name" : "start",
                "icon" : "double-forward",
                "label" : "Start",
                "contents" : "pushPostamble(forward)",
                "color" : "00FF00",
                "comment" : "Optional marker for start",
                "description" : "Functionally identical to 'postamble-forward', but with different color to mark start"
            },
            {
                "name" : "forward",
                "label" : "Forward",
                "contents" : "forward()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "back",
                "label" : "Back",
                "contents" : "back()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "up",
                "label" : "Up",
                "contents" : "up()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "down",
                "label" : "Down",
                "contents" : "down()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "go-right",
                "icon" : "right",
                "label" : "Go right",
                "contents" : "turnRight() t.forward()",
                "comment" : "Turn and make single step"
            },
            {
                "name" : "go-left",
                "icon" : "left",
                "label" : "Go left",
                "contents" : "turnLeft() t.forward()",
                "comment" : "Turn and make single step"
            },
            {
                "name" : "turn-right",
                "icon" : "right",
                "label" : "Turn right",
                "contents" : "turnRight()"
            },
            {
                "name" : "turn-left",
                "icon" : "left",
                "label" : "Turn left",
                "contents" : "turnLeft()"
            },
            
            {
                "name" : "step-forward",
                "label" : "Single step forward",
                "contents" : "t.forward()"
            },
            {
                "name" : "step-back",
                "label" : "Single step back",
                "contents" : "t.back()"
            },
            {
                "name" : "step-up",
                "label" : "Single step up",
                "contents" : "t.up()"
            },
            {
                "name" : "step-down",
                "label" : "Single step down",
                "contents" : "t.down()"
            },
            
            {
                "name" : "postamble-forward",
                "icon" : "double-forward",
                "label" : "Default move: forward",
                "contents" : "pushPostamble(forward)",
                "comment" : "Call 'forward' after command from tag is executed"
            },
            {
                "name" : "postamble-back",
                "icon" : "double-forward",
                "label" : "Default move: back",
                "contents" : "pushPostamble(back)",
                "comment" : "Call 'back' after command from tag is executed"
            },
            {
                "name" : "postamble-up",
                "icon" : "double-forward",
                "label" : "Default move: up",
                "contents" : "pushPostamble(up)",
                "comment" : "Call 'up' after command from tag is executed"
            },
            {
                "name" : "postamble-down",
                "icon" : "double-forward",
                "label" : "Default move: down",
                "contents" : "pushPostamble(down)",
                "comment" : "Call 'down' after command from tag is executed"
            },
            {
                "name" : "orient-front",
                "icon" : "orient-front",
                "label" : "Orient front",
                "contents" : "orient('front')",
                "comment" : "Rotate turtle until tag is in front"
            },
            {
                "name" : "orient-right",
                "icon" : "orient-right",
                "label" : "Orient right",
                "contents" : "orient('right')",
                "comment" : "Rotate turtle until tag is on the right side"
            },
            {
                "name" : "orient-left",
                "icon" : "orient-left",
                "label" : "Orient left",
                "contents" : "orient('left')",
                "comment" : "Rotate turtle until tag is on the left side"
            },
            {
                "name" : "orient-back",
                "icon" : "orient-back",
                "label" : "Orient back",
                "contents" : "orient('back')",
                "comment" : "Rotate turtle until tag is on back"
            }
        ]
    },
    {
        "name" : "inventory",
        "notes" : "Functions like 'suck' or  'drop' will automatically try to pick proper inventory - either rotate turtle, so he is facing tag or call ...Up/..Down versions of command.\n Second argument of those functions is boolean, describing if turtle should restore its initial orientation",
        "color" : "FFFF00",
        "tags" :
        [
            {
                "name" : "refuel",
                "icon" : "energy",
                "label" : "Refuel",
                "contents" : "suck(tagDir, true) refuel()",
                "comment" : "Will suck from inventory in tagged block"
            },
            {
                "name" : "suck",
                "icon" : "out",
                "label" : "Suck",
                "contents" : "suck(tagDir, true)"
            },
            {
                "name" : "drop",
                "icon" : "in",
                "label" : "Drop",
                "contents" : "drop(tagDir, true)"
            },
            {
                "name" : "first-slot",
                "category" : "inventory",
                "icon" : "first",
                "label" : "Select first slot",
                "contents" : "_slot = 1 select(_slot)"
            },
            {
                "name" : "last-slot",
                "category" : "inventory",
                "icon" : "last",
                "label" : "Select last slot",
                "contents" : "_slot = 16 select(_slot)"
            },
            {
                "name" : "next-slot",
                "category" : "inventory",
                "icon" : "next",
                "label" : "Select next slot",
                "contents" : "_slot = math.min(_slot + 1, 16) select(_slot)"
            },
            {
                "name" : "prev-slot",
                "category" : "inventory",
                "icon" : "prev",
                "label" : "Select previous slot",
                "contents" : "_slot = math.max(_slot - 1, 1) select(_slot)"
            }
        ]
    },
    {
        "name" : "condition",
        "color" : "0000FF",
        "icon" : "question",
        "notes" : "Commands in this category will push result onto argument stack. 'compare' and 'detect' operate on block with tag (see notes for 'inventory')",
        "tags" :
        [
            {
                "name" : "compare",
                "label" : "Compare",
                "contents" : "push(compare(tagDir, true))",
                "comment" : "Result on stack"
            },
            {
                "name" : "detect",
                "category" : "condition",
                "label" : "Detect",
                "contents" : "push(detect(tagDir, true))",
                "comment" : "Result on stack"
            }
        ]
    },
    {
        "name" : "branch",
        "notes" : "Commands in this category use argument stack. Helper function 'cond(function, ...)' is equivalent to 'if pop() then function(...) end'",
        "color" : "FF0000",
        "icon" : "branch",
        "tags" : 
        [
            {
                "name" : "branch-left",
                "label" : "Conditional left",
                "contents" : "cond(turnLeft)",
                "comment" : "Condition on stack"
            },
            {
                "name" : "branch-right",
                "label" : "Conditional right",
                "contents" : "cond(turnRight)",
                "comment" : "Condition on stack"
            },
            {
                "name" : "branch-stop",
                "label" : "Conditional right",
                "contents" : "cond(stop)",
                "comment" : "Condition on stack"
            }
        ]
    },
    {
        "name" : "logic",
        "notes" : "Functions in this category operate on argument stack (pop needed arguments and push result back). For example: 'and_()' == 'push(pop() and pop())'",
        "color" : "ABABAB",
        "tags" :
        [
            {
                "name" : "and",
                "label" : "Logical and",
                "icon" : "text!and",
                "contents" : "and_()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "or",
                "label" : "Logical or",
                "icon" : "text!or",
                "contents" : "or_()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "not",
                "label" : "Logical not",
                "icon" : "text!not",
                "contents" : "not_()",
                "comment" : "Argument on stack"
            }
        ]
    },
    {
        "name" : "arithmetic",
        "notes" : "Functions in this category operate on argument stack (pop needed arguments and push result back)",
        "color" : "ABABAB",
        "tags" :
        [
            {
                "name" : "zero",
                "label" : "Push zero",
                "icon" : "dni-zero",
                "contents" : "push(0)"
            },
            {
                "name" : "one",
                "label" : "Push one",
                "icon" : "dni-one",
                "contents" : "push(1)"
            },
            {
                "name" : "add",
                "label" : "Add",
                "icon" : "text!add",
                "contents" : "add()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "sub",
                "label" : "Subtract",
                "icon" : "text!sub",
                "contents" : "sub()",
                "comment" : "Arguments on stack"
            },
            
            {
                "name" : "mul",
                "label" : "Muliply",
                "icon" : "text!mul",
                "contents" : "mul()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "div",
                "label" : "Divide",
                "icon" : "text!div",
                "contents" : "div()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "inc",
                "label" : "Increment",
                "icon" : "text!++",
                "contents" : "inc()",
                "comment" : "Argument on stack"
            },
            {
                "name" : "dec",
                "label" : "Decrement",
                "icon" : "text!--",
                "contents" : "dec()",
                "comment" : "Argument on stack"
            },
            {
                "name" : "neg",
                "label" : "Negate",
                "icon" : "text!neg",
                "contents" : "neg()",
                "comment" : "Argument on stack"
            }
        ]
    },
    {
        "name" : "control",
        "color" : "FFFFFF",
        "tags" :
        [
            {
                "name" : "print",
                "icon" : "question",
                "label" : "Print",
                "contents" : "print(top())",
                "comment" : "Print top of stack"
            },
            {
                "name" : "pop",
                "icon" : "pop",
                "label" : "Pop",
                "contents" : "pop()",
                "comment" : "Pop top of stack"
            },
            {
                "name" : "repeat",
                "icon" : "prev",
                "label" : "Repeat",
                "contents" : "prev()",
                "comment" : "Repeat command from previously read tag"
            },
            {
                "name" : "postamble-prev",
                "icon" : "push",
                "label" : "Push default: prev",
                "contents" : "pushPostamble(prev)",
                "comment" : "Execute previous command after all tags",
                "description" : "Command from previously read tag will be executed after any new one (including this)"
            },
            {
                "name" : "postamble-pop-continue",
                "icon" : "pop",
                "label" : "Pop and call default",
                "contents" : "p = popPostamble() p()",
                "description" : "Restore previous postamble (command executed after tag) and call current one"
            },
            {
                "name" : "postamble-pop",
                "icon" : "pop",
                "label" : "Pop default",
                "contents" : "popPostamble()",
                "description" : "Restore previous postamble (command executed after tag)"
            },
            {
                "name" : "sleep-1",
                "icon" : "hourglass",
                "label" : "Sleep one second",
                "contents" : "sleep(1)"
            },
            {
                "name" : "sleep-0.5",
                "icon" : "hourglass",
                "label" : "Sleep half second",
                "contents" : "sleep(0.5)"
            },
            {
                "name" : "stop",
                "comment" : "Stop program execution",
                "icon" : "no",
                "label" : "Stop",
                "contents" : "stop()",
                "color" : "FF0000",
                "description" : "Exit 'follow' program - no more tags will be read after that. All postambles are deactivated"
            }
        ]
    }
]