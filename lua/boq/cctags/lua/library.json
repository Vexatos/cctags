[
    {
        "name" : "move",
        "icon" : "forward",
        "notes" : " 'forward', 'back', 'down', 'up' will move turtle in one direction until new tag is found.\n'pushPostamble(function)' will make argument execute after any code from tag. Previous value is saved and can be restored with 'popPostamble'",
        "tags" :
        [        
            {
                "name" : "start",
                "icon" : "double-forward",
                "label" : "Start",
                "contents" : "pushPostamble(forward)",
                "color" : "00FF00",
                "comment" : "Optional marker for start",
                "description" : "Functionally identical to 'postamble-forward', but with different color to mark start"
            },
            {
                "name" : "forward",
                "label" : "Forward",
                "contents" : "forward()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "back",
                "label" : "Back",
                "contents" : "back()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "up",
                "label" : "Up",
                "contents" : "up()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "down",
                "label" : "Down",
                "contents" : "down()",
                "comment" : "Stops on new tag"
            },
            {
                "name" : "go-right",
                "icon" : "right",
                "label" : "Go right",
                "contents" : "turnRight() t.forward()",
                "comment" : "Turn and make single step"
            },
            {
                "name" : "go-left",
                "icon" : "left",
                "label" : "Go left",
                "contents" : "turnLeft() t.forward()",
                "comment" : "Turn and make single step"
            },
            {
                "name" : "turn-right",
                "icon" : "right",
                "label" : "Turn right",
                "contents" : "turnRight()"
            },
            {
                "name" : "turn-left",
                "icon" : "left",
                "label" : "Turn left",
                "contents" : "turnLeft()"
            },
            
            {
                "name" : "step-forward",
                "label" : "Single step forward",
                "contents" : "t.forward()"
            },
            {
                "name" : "step-back",
                "label" : "Single step back",
                "contents" : "t.back()"
            },
            {
                "name" : "step-up",
                "label" : "Single step up",
                "contents" : "t.up()"
            },
            {
                "name" : "step-down",
                "label" : "Single step down",
                "contents" : "t.down()"
            },
            
            {
                "name" : "postamble-forward",
                "icon" : "double-forward",
                "label" : "Default move: forward",
                "contents" : "pushPostamble(forward)",
                "comment" : "Call 'forward' after command from tag is executed"
            },
            {
                "name" : "postamble-back",
                "icon" : "double-forward",
                "label" : "Default move: back",
                "contents" : "pushPostamble(back)",
                "comment" : "Call 'back' after command from tag is executed"
            },
            {
                "name" : "postamble-up",
                "icon" : "double-forward",
                "label" : "Default move: up",
                "contents" : "pushPostamble(up)",
                "comment" : "Call 'up' after command from tag is executed"
            },
            {
                "name" : "postamble-down",
                "icon" : "double-forward",
                "label" : "Default move: down",
                "contents" : "pushPostamble(down)",
                "comment" : "Call 'down' after command from tag is executed"
            },
            {
                "name" : "orient-front",
                "icon" : "orient-front",
                "label" : "Orient front",
                "contents" : "orient('front')",
                "comment" : "Rotate turtle until tag is in front"
            },
            {
                "name" : "orient-right",
                "icon" : "orient-right",
                "label" : "Orient right",
                "contents" : "orient('right')",
                "comment" : "Rotate turtle until tag is on the right side"
            },
            {
                "name" : "orient-left",
                "icon" : "orient-left",
                "label" : "Orient left",
                "contents" : "orient('left')",
                "comment" : "Rotate turtle until tag is on the left side"
            },
            {
                "name" : "orient-back",
                "icon" : "orient-back",
                "label" : "Orient back",
                "contents" : "orient('back')",
                "comment" : "Rotate turtle until tag is on back"
            },
            {
                "name" : "rotate-to-arg",
                "icon" : "rotate-cw",
                "label" : "Rotate to argument",
                "contents" : "rotate(pop())",
                "comment" : "Pop direction and rotate"
            },
            {
                "name" : "move-to-arg",
                "icon" : "dir",
                "label" : "Move in direction",
                "contents" : "replacePostamble(pop())",
                "comment" : "Start moving into direction passed on stack"
            }
        ]
    },
    {
        "name" : "inventory",
        "notes" : "Functions like 'suck' or  'drop' will automatically try to pick proper inventory - either rotate turtle, so he is facing tag or call ...Up/..Down versions of command.\n Second argument of those functions is boolean, describing if turtle should restore its initial orientation",
        "color" : "FFFF00",
        "tags" :
        [
            {
                "name" : "refuel",
                "icon" : "energy",
                "label" : "Refuel",
                "contents" : "suck(tagDir, true) refuel()",
                "comment" : "Will suck from inventory in tagged block"
            },
            {
                "name" : "suck",
                "icon" : "out",
                "label" : "Suck",
                "contents" : "suck(tagDir, true)"
            },
            {
                "name" : "drop",
                "icon" : "in",
                "label" : "Drop",
                "contents" : "drop(tagDir, true)"
            },
            {
                "name" : "place",
                "icon" : "in",
                "label" : "Place",
                "comment" : "Place block in front of turtle",
                "contents" : "t.place()"
            },
            {
                "name" : "first-slot",
                "category" : "inventory",
                "icon" : "first",
                "label" : "Select first slot",
                "contents" : "_slot = 1 select(_slot)"
            },
            {
                "name" : "last-slot",
                "category" : "inventory",
                "icon" : "last",
                "label" : "Select last slot",
                "contents" : "_slot = 16 select(_slot)"
            },
            {
                "name" : "next-slot",
                "category" : "inventory",
                "icon" : "next",
                "label" : "Select next slot",
                "contents" : "_slot = math.min(_slot + 1, 16) select(_slot)"
            },
            {
                "name" : "prev-slot",
                "category" : "inventory",
                "icon" : "prev",
                "label" : "Select previous slot",
                "contents" : "_slot = math.max(_slot - 1, 1) select(_slot)"
            },
            {
                "name" : "push-slot",
                "category" : "inventory",
                "icon" : "push",
                "label" : "Push current slot",
                "contents" : "push(_slot)"
            },
            {
                "name" : "pop-slot",
                "category" : "inventory",
                "icon" : "pop",
                "label" : "Select slot from stack",
                "contents" : "_slot = pop() select(_slot)"
            },
            {
                "name" : "item-count",
                "category" : "inventory",
                "icon" : "question",
                "label" : "Get item count in slot",
                "contents" : "push(getItemCount(pop()))"
            },
            {
                "name" : "item-count-current",
                "category" : "inventory",
                "icon" : "question",
                "label" : "Get item count in current slot",
                "contents" : "push(getItemCount(_slot))"
            }
        ]
    },
    {
        "name" : "condition",
        "color" : "0000FF",
        "icon" : "question",
        "notes" : "Commands in this category will push result onto argument stack. 'compare' and 'detect' operate on block with tag (see notes for 'inventory')",
        "tags" :
        [
            {
                "name" : "compare",
                "label" : "Compare",
                "contents" : "push(compare(tagDir, true))",
                "comment" : "Result on stack"
            },
            {
                "name" : "detect",
                "label" : "Detect",
                "contents" : "push(detect(tagDir, true))",
                "comment" : "Result on stack"
            }
        ]
    },
    {
        "name" : "redstone",
        "color" : "FF0000",
        "icon" : "dust",
        "notes" : "Commands in this category will push result onto argument stack",
        "tags" :
        [
            {
                "name" : "redstone-get",
                "label" : "Read redstone",
                "contents" : "push(redstone.getAnalogInput(tagDir))",
                "comment" : "Result on stack"
            },
            {
                "name" : "redstone-set-analog",
                "label" : "Set redstone output (analog)",
                "contents" : "redstone.setAnalogOutput(pop())",
                "comment" : "Argument on stack"
            },
            {
                "name" : "redstone-set-digital",
                "label" : "Set redstone output (digital)",
                "contents" : "redstone.setOutput(pop())",
                "comment" : "Argument on stack"
            },
            {
                "name" : "push-redstone-dir",
                "label" : "Push signal dir",
                "icon" : "push",
                "contents" : "push(scanRedstone())",
                "comment" : "Push redstone signal directions"
            },
            {
                "name" : "redstone-wait",
                "label" : "Wait for redstone",
                "icon" : "hourglass",
                "contents" : "os.pullEvent('redstone')",
                "comment" : "Wait for any redstone event"
            },
            {
                "name" : "redstone-wait-dir",
                "label" : "Wait for redstone (sided)",
                "icon" : "hourglass",
                "contents" : "waitForRedstone(tagDir)",
                "comment" : "Wait for redstone signal from tag side"
            },
            {
                "name" : "redstone-read-top",
                "label" : "Read top signal",
                "icon" : "push",
                "contents" : "push(rs.getInput('top'))",
                "comment" : "Wait for redstone signal from tag side"
            }
        ]
    },
    {
        "name" : "branch",
        "notes" : "Commands in this category use argument stack. Helper function 'cond(function, ...)' is equivalent to 'if pop() then function(...) end'",
        "color" : "FF0000",
        "icon" : "branch",
        "tags" : 
        [
            {
                "name" : "branch-left",
                "label" : "Conditional left",
                "contents" : "cond(turnLeft)",
                "comment" : "Condition on stack"
            },
            {
                "name" : "branch-right",
                "label" : "Conditional right",
                "contents" : "cond(turnRight)",
                "comment" : "Condition on stack"
            },
            {
                "name" : "branch-stop",
                "label" : "Conditional stop",
                "contents" : "if pop() then stop() return end",
                "comment" : "Condition on stack"
            },
            {
                "name" : "branch-skip",
                "label" : "Conditional skip next command",
                "contents" : "cond(control.skip())",
                "comment" : "Condition on stack"
            },
            {
                "name" : "junction",
                "label" : "Junction",
                "contents" : "if pop() then turnRight() else turnLeft() end",
                "comment" : "Turn left on true, right on false"
            }
        ]
    },
    {
        "name" : "logic",
        "notes" : "Functions in this category operate on argument stack (pop needed arguments and push result back). For example: 'and_()' == 'push(pop() and pop())'",
        "color" : "FF911C",
        "tags" :
        [
            {
                "name" : "and",
                "label" : "Logical and",
                "icon" : "text!and",
                "contents" : "and_()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "or",
                "label" : "Logical or",
                "icon" : "text!or",
                "contents" : "or_()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "not",
                "label" : "Logical not",
                "icon" : "text!not",
                "contents" : "not_()",
                "comment" : "Argument on stack"
            }
        ]
    },
    {
        "name" : "arithmetic",
        "notes" : "Functions in this category operate on argument stack (pop needed arguments and push result back)",
        "color" : "FF911C",
        "tags" :
        [
            {
                "name" : "zero",
                "label" : "Push zero",
                "icon" : "dni-zero",
                "contents" : "push(0)"
            },
            {
                "name" : "one",
                "label" : "Push one",
                "icon" : "dni-one",
                "contents" : "push(1)"
            },
            {
                "name" : "two",
                "label" : "Push two",
                "icon" : "dni-two",
                "contents" : "push(2)"
            },
            {
                "name" : "three",
                "label" : "Push three",
                "icon" : "dni-three",
                "contents" : "push(3)"
            },
            {
                "name" : "four",
                "label" : "Push four",
                "icon" : "dni-four",
                "contents" : "push(4)"
            },
            {
                "name" : "add",
                "label" : "Add",
                "icon" : "text!add",
                "contents" : "add()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "sub",
                "label" : "Subtract",
                "icon" : "text!sub",
                "contents" : "sub()",
                "comment" : "Arguments on stack"
            },
            
            {
                "name" : "mul",
                "label" : "Muliply",
                "icon" : "text!mul",
                "contents" : "mul()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "div",
                "label" : "Divide",
                "icon" : "text!div",
                "contents" : "div()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "inc",
                "label" : "Increment",
                "icon" : "text!++",
                "contents" : "inc()",
                "comment" : "Argument on stack"
            },
            {
                "name" : "dec",
                "label" : "Decrement",
                "icon" : "text!--",
                "contents" : "dec()",
                "comment" : "Argument on stack"
            },
            {
                "name" : "neg",
                "label" : "Negate",
                "icon" : "text!neg",
                "contents" : "neg()",
                "comment" : "Argument on stack"
            }
        ]
    },
    {
        "name" : "relations",
        "color" : "FF911C",
        "tags" :
        [
            {
                "name" : "gt",
                "label" : "Greater than",
                "icon" : "text!a>b",
                "contents" : "gt()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "lt",
                "label" : "Less than",
                "icon" : "text!a<b",
                "contents" : "lt()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "eq",
                "label" : "Equal",
                "icon" : "text!a==b",
                "contents" : "eq()",
                "comment" : "Arguments on stack"
            },
            {
                "name" : "neq",
                "label" : "Not equal",
                "icon" : "text!a!=b",
                "contents" : "neq()",
                "comment" : "Arguments on stack"
            },
            {
            "name" : "lt0",
                "label" : "Less than zero",
                "icon" : "text!a<0",
                "contents" : "push(pop() < 0)",
                "comment" : "Argument on stack"
            },
            {
                "name" : "le0",
                "label" : "Less or equal zero",
                "icon" : "text!a<=0",
                "contents" : "push(pop() <= 0)",
                "comment" : "Argument on stack"
            },
            {
            "name" : "gt0",
                "label" : "Greater than zero",
                "icon" : "text!a>0",
                "contents" : "push(pop() > 0)",
                "comment" : "Argument on stack"
            },
            {
                "name" : "ge0",
                "label" : "Greater or equal zero",
                "icon" : "text!a>=0",
                "contents" : "push(pop() >= 0)",
                "comment" : "Argument on stack"
            },
            {
                "name" : "eq0",
                "label" : "Equal to zero",
                "icon" : "text!a==0",
                "contents" : "push(pop() == 0)",
                "comment" : "Argument on stack"
            },
            {
                "name" : "neq0",
                "label" : "Not equal to zero",
                "icon" : "text!a~=0",
                "contents" : "push(pop() ~= 0)",
                "comment" : "Argument on stack"
            },
            {
                "name" : "nil",
                "label" : "Is nil?",
                "icon" : "text!a == nil",
                "contents" : "push(pop() == nil)",
                "comment" : "Argument on stack"
            }
        ]
    },
    {
        "name" : "text",
        "color" : "FF911C",
        "tags" :
        [
            {
                "name" : "tostring",
                "label" : "Convert to string",
                "icon" : "text!a->str",
                "contents" : "push(tostring(pop()))",
                "comment" : "Argument on stack"
            },
            {
                "name" : "tonumber",
                "label" : "Convert to number",
                "icon" : "text!a->num",
                "contents" : "push(tonumber(pop()))",
                "comment" : "Argument on stack"
            },
            {
                "name" : "concat",
                "label" : "Concatenate",
                "icon" : "text!a..b",
                "contents" : "concat()",
                "comment" : "Argument on stack"
            }
        ]
    },
    {
        "name" : "stack",
        "color" : "68FF9F",
        "tags" :
        [
            {
                "name" : "print",
                "icon" : "question",
                "label" : "Print",
                "contents" : "print(top())",
                "comment" : "Print top of stack"
            },
            {
                "name" : "pop",
                "icon" : "pop",
                "label" : "Pop",
                "contents" : "pop()",
                "comment" : "Pop top of stack"
            },
            {
                "name" : "dup",
                "icon" : "copy",
                "label" : "Duplicate",
                "contents" : "dup()",
                "comment" : "Duplicate top of stack"
            },
            {
                "name" : "swap",
                "icon" : "swap",
                "label" : "Swap",
                "contents" : "swap()",
                "comment" : "Swap top stack elements"
            },
            {
                "name" : "store",
                "icon" : "in",
                "label" : "Store",
                "contents" : "store(pop())",
                "comment" : "Pop index and store next stack value to slot[index]"
            },
            {
                "name" : "load",
                "icon" : "out",
                "label" : "Load",
                "contents" : "load(pop())",
                "comment" : "Pop index and load value from slot[index]"
            }
        ]
    },
    {
        "name" : "control",
        "color" : "33CCCC",
        "tags" :
        [
            {
                "name" : "repeat",
                "icon" : "gear",
                "label" : "Repeat",
                "contents" : "prev()",
                "comment" : "Repeat command from previously read tag"
            },
            {
                "name" : "repeat-times",
                "icon" : "gear",
                "label" : "Repeat n",
                "contents" : "for i=0,pop() do prev() end",
                "comment" : "Repeat command from previously read tag n times (value on stack)"
            },
            {
                "name" : "postamble-prev",
                "icon" : "push",
                "label" : "Push default: prev",
                "contents" : "pushPostamble(prev)",
                "comment" : "Execute previous command after all tags",
                "description" : "Command from previously read tag will be executed after any new one (including this)"
            },
            {
                "name" : "postamble-pop-continue",
                "icon" : "pop",
                "label" : "Pop and call default",
                "contents" : "p = popPostamble() p()",
                "description" : "Restore previous postamble (command executed after tag) and call current one"
            },
            {
                "name" : "postamble-pop",
                "icon" : "pop",
                "label" : "Pop default",
                "contents" : "popPostamble()",
                "description" : "Restore previous postamble (command executed after tag)"
            },
            {
                "name" : "postamble-disable",
                "icon" : "pause",
                "label" : "Disable postamble",
                "contents" : "pausePostamble()",
                "comment" : "Restore with popPostamble()",
                "description" : "Temporarily disable postamble. Will repeat current postamble, since otherwise turtle would stop."
            },
            {
                "name" : "sleep-1",
                "icon" : "hourglass",
                "label" : "Sleep one second",
                "contents" : "sleep(1)"
            },
            {
                "name" : "sleep-0.5",
                "icon" : "hourglass",
                "label" : "Sleep half second",
                "contents" : "sleep(0.5)"
            },
            {
                "name" : "stop",
                "comment" : "Stop program execution",
                "icon" : "no",
                "label" : "Stop",
                "contents" : "stop()",
                "color" : "FF0000",
                "description" : "Exit 'follow' program - no more tags will be read after that. All postambles are deactivated"
            },
            {
                "name" : "record",
                "label" : "Record macro",
                "icon" : "record",
                "contents" : "!record",
                "comment" : "Any next command will be appended to macro",
                "description" : "Any encountered tag won't be executed, but will be added to command list. Use tag with '!save' to finish"
            },
            {
                "name" : "record-execute",
                "label" : "Record and execute macro",
                "icon" : "record",
                "contents" : "!record_execute",
                "comment" : "Any next command will be executed and appended to macro",
                "description" : "Any encountered tag will be executed, but also added to command list. Use tag with '!save' to finish"
            },
            {
                "name" : "skip-next",
                "label" : "Skip next tag",
                "icon" : "next",
                "contents" : "!skip",
                "comment" : "Skip any next tag"
            },
            {
                "name" : "push-macro",
                "label" : "Save macro",
                "icon" : "push",
                "contents" : "!save",
                "comment" : "Recorded macro will be pushed to stack. Start recording macro with 'record'",
                "description" : "Recorded macro will be pushed to stack. Use 'call' to replay."
            },
            {
                "name" : "play-macro",
                "label" : "Play macro (pop)",
                "icon" : "play",
                "contents" : "pop()()",
                "comment" : "Plays previously recorded macro (pop value from stack)"
            },
            {
                "name" : "play-keep-macro",
                "label" : "Play macro (keep)",
                "icon" : "play",
                "contents" : "top()()",
                "comment" : "Plays previously recorded macro (keep value on stack)"
            },
            {
                "name" : "execute-pause",
                "label" : "Pause command execution",
                "icon" : "pause",
                "contents" : "!pause",
                "comment" : "Restore execution with !restore"
            },
            {
                "name" : "execute-restore",
                "label" : "Restore command execution",
                "icon" : "play",
                "contents" : "!restore"
            },
            {
                "name" : "postamble-macro",
                "label" : "Set macro as postamble",
                "icon" : "gear",
                "contents" : "pushPostamble(pop())",
                "comment" : "Sets previously recorded macro as postamble"
            },
            {
                "name" : "reader-disable",
                "label" : "Stop reading tags",
                "icon" : "off",
                "contents" : "readTags=false"
            },
            {
                "name" : "reader-enable",
                "label" : "Restore reading tags",
                "icon" : "on",
                "contents" : "readTags=true"
            },
            {
                "name" : "missing-ignore",
                "label" : "Ignore missing tags",
                "icon" : "on",
                "contents" : "ignoreMissing=true"
            },
            {
                "name" : "missing-fail",
                "label" : "Stop on missing tags",
                "icon" : "off",
                "contents" : "ignoreMissing=false"
            }
        ]
    },
    {
        "name" : "misc",
        "color" : "ACACAC",
        "tags" :
        [
            {
                "name" : "debug-on",
                "label" : "Debug output on",
                "icon" : "question",
                "contents" : "debug(true)",
                "description" : "Will print informations like stack operations"
            },
            {
                "name" : "debug-off",
                "label" : "Debug output off",
                "icon" : "question",
                "contents" : "debug(false)",
                "description" : "Will print informations like stack operations"
            },
            {
                "name" : "counter-inc",
                "label" : "Increment current tag",
                "icon" : "text!tag[]++",
                "contents" : "counters.inc(serial)",
                "comment" : "Increment counter for tag and push to stack",
                "description" : "Counters are kept on turtle, so they can't be shared. Values do not persist between runs."
            },
            {
                "name" : "push-tag-dir",
                "label" : "Push tag dir",
                "icon" : "push",
                "contents" : "push(tagDir)",
                "comment" : "Push current tag direction (relative to turtle)"
            }
        ]
    }
]