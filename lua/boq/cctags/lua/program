local function parseLine(line)
    if line:sub(1,2) == "--" then
        return "comment"
    end
    
    local sep = line:find("@")
    if sep ~= nil then
        quantity = line:sub(1, sep - 1)
        id = line:sub(sep + 1)
        return "lib", id, quantity
    end
     
    sep = line:find(":")
    if sep == nil then
        return "free",line, 1
    end
    
    local params = line:sub(1, sep - 1)
    local contents = string.match(line:sub(sep + 1), "^%s*(.+)" )
    if not contents then
        return "error"
    end
    
    local it = params:gmatch("[%S]+")
    local quantity = it()
    local icon = it()
    local label = it()
    
    return "free",contents, quantity, icon, label
end

local function writeTag(type, contents, icon, label)
    print("Writing '".. contents .. "'. Insert tag or press space to skip. Press any other key to abort")
    while true do
        local event, arg = os.pullEvent()
        
        if event == "tag" then
            local p, t = tags.getPeripheral(arg)
            
            if type == "lib" then
                contents, icon, label = p.library(contents)
            end
            
            local result, err = p.write(contents)
            if not result then
                error(err)
            end
            
            if icon then
                if not p.print then
                    print(string.format("Peripheral on side %s has no printing capabilities", arg))
                else            
                    local  result, err = p.print(icon, label)
                    if not result then
                        error(err)
                    end
                end
            end
            
            p.eject()
            return true
        elseif event == "key" then
            return arg == keys.space
        end
    end
end

local args = { ... }
if #args <= 0 then
    print("Usage: progtag <path to file>")
    return
end

local path = shell.resolve(args[1])

if not fs.exists(path) or fs.isDir(path) then
    print("File " .. path .. " is directory")
    return
end

os.loadAPI("rom/apis/tags")

local file = io.open(path, "r")
local line = file:read()
local finished = false
local lineNum = 0
while line and not finished do
    lineNum  = lineNum + 1
    local type, command, quantity, icon, label = parseLine(line)
    
    if type == "error" then
        print(string.format("Invalid line %d: %s", lineNum, line))
    elseif type == "comment" then
        print(line)
    elseif type == "lib" or type == "free" then
        print(string.format("Printing %d tag(s) from line %d", quantity, lineNum))
        for i = 1,quantity do
            if not writeTag(type, command, icon, label) then
                finished = true
                break
            end
        end
    else
        print("Ooops: " .. type);
    end
    
    line = file:read()
end
file:close()
print("Finished")