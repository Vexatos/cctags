local function isReader(t)
    return t == "tag_writer" or t == "tag_printer"
end

function getPeripheral(side)
    local t = peripheral.getType(side)
    if t == nul then
        error("No peripheral found")
    elseif not isReader(t) then
        error("Invalid peripheral type " .. t .. " on side " .. side)
    end
    return peripheral.wrap(side), t
end

DIRECTIONS = {"top", "bottom", "front", "back", "left", "right"}
function scanForTags(side, dirs)
    local dirs = dirs or DIRECTIONS
    local p = getPeripheral(side)
    for _,dir in pairs(dirs) do
        if p.scanForTag(dir) then
            local contents, size = p.contents()
            return dir, contents, size, p.size(), p.serial()
        end
    end
end

local function subset(source, ...)
    local result = {}
    local names = { ... }
    for _,name in pairs(names) do
        result[name] = source[name]
    end
    
    return result
end

local function append(target, source)
    for k,v in pairs(source) do
        target[k] = v
    end
end

function stack(initial)
    local empty = {
        value = initial
    }
    
    empty.prev = empty
    
    local head = empty
    
    local result = {}
    
    function result.push(v)
        head = {
            value = v,
            prev = head
        }
    end
    
    function result.pop()
        local c = head.value
        head = head.prev
        return c
    end
    
    function result.top()
        return head.value
    end
    
    function result.clear()
        head = empty
    end
    
    return result
end

-- it's a big function, but we want to inject runtime variables into scope during function declaration and delay few things until APIs are loaded
-- all functions declared here will be visible for tags
-- all runtime variables from follow (like tagDir, reader, etc) are visible inside this function
local function create_env(_self)
    local function include(t)
        append(_self, t)
    end
    
    local debugPrint = false

    function debug(arg)
       debugPrint = arg
    end
    
    _args = tags.stack(nil)
    
    function push(value) 
        _args.push(value)
        if debugPrint then
            print('Push: ' .. tostring(value))
        end
    end
    
    function pop()
        value = _args.pop()
        if debugPrint then
            print('Pop: ' .. tostring(value))
        end
        return value 
    end
    
    top = _args.top

    pullEvent = os.pullEvent
    scan = scanForTags
    sleep = os.sleep
    
    function writeTag(side, contents)
        local p = getPeripheral(side)
        p.write(contents)
    end
    
    function readTag(side)
        local p = getPeripheral(side)
        local contents, size = p.contents()
        return contents, size, p.size()
    end

    local function unaryStackFun(fun)
        return function()
            local arg = pop()
            local result = fun(arg)
            push(result)
        end
    end
    
    local function binaryStackFun(fun)
        return function()
            push(fun(pop(), pop()))
        end
    end
    
    --logic
    and_ = binaryStackFun(function(a,b) return a and b end)
    or_ = binaryStackFun(function(a,b) return a or b end)
    not_ = unaryStackFun(function(a) return not a end)
    
    -- relational
    eq = binaryStackFun(function(a,b) return a == b end)
    neq = binaryStackFun(function(a,b) return a ~= b end)
    gt = binaryStackFun(function(a,b) return a > b end)
    lt = binaryStackFun(function(a,b) return a < b end)
    ge = binaryStackFun(function(a,b) return a >= b end)
    le = binaryStackFun(function(a,b) return a <= b end)
    
    --arithmetic
    add = binaryStackFun(function(a,b) return a + b end)
    sub = binaryStackFun(function(a,b) return a - b end)
    mul = binaryStackFun(function(a,b) return a * b end)
    div = binaryStackFun(function(a,b) return a / b end)
    neg = unaryStackFun(function(a) return -a end)
    inc = unaryStackFun(function(a) return a + 1 end)
    dec = unaryStackFun(function(a) return a - 1 end)
    
    --text
    concat = binaryStackFun(function(a,b) return tostring(a) .. tostring(b) end)
    
    local function counter_op(op)
        return function (serial)
            local val = _counters[serial] or 0
            local new_val = op(val)
            _counters[serial] = new_val
            push(new_val)
        end
    end
    
    counters =  {
        inc = counter_op(function(a) return a + 1 end),
        dec = counter_op(function(a) return a - 1 end),
        get = function (serial) return _counters[serial] or 0 end
    }
    
    --stack
    function cond(fun, ...)
        local condition = pop()
        if condition then
            return fun(...)
        end
    end
    
    function check(fun, ...)
        local result = fun(...)
        push(result)
        return result
    end
    
    function dup()
        push(top())
    end
    
    function swap()
        local A = pop()
        local B = pop()
        push(A)
        push(B)
    end
    
    _storage = {}
    function store(index)
        _storage[index] = pop()
    end
    
    function load(index)
        push(_storage[index])
    end

    -- turtle API has some loading logic, so we need to delay creation of those tables
    include(subset(turtle, 
        "turnLeft",
        "turnRight",

        "select",
        "transferTo",
        "getItemCount",
        "getItemSpace",
        
        "compareTo",
        
        "refuel",
        "getFuelLevel"
    ))

    local function moveUntilTag(action)
        return function()
            while true do
                if not action() then
                    print("Error during movement. Aborting!")
                    break
                end
                
                local dir = tags.scanForTags(reader)
                if dir then
                    break
                end
            end
        end
    end
    
    forward = moveUntilTag(turtle.forward)
    back = moveUntilTag(turtle.back)
    up = moveUntilTag(turtle.up)
    down = moveUntilTag(turtle.down)

    function twice(action)
        return function() action() action() end
    end
    
    local function selectAction(list, arg)
        local action = list[arg]
        if action then
            action()
        end
    end

    local turtleRotate = {
        left = turtle.turnLeft,
        right = turtle.turnRight,
        back = twice(turtle.turnRight)
    }

    local turtleReverse = {
        left = turtle.turnRight,
        right = turtle.turnLeft,
        back = twice(turtle.turnLeft)
    }
    
    function rotate(side)
        selectAction(turtleRotate, side)
    end
    
    local moveSide = {
        top = up,
        bottom = down,
        forward = forward,
        back = back
    }
    
    function replacePostamble(side)
        action = moveSide[side]
        if action then
            popPostamble()
            pushPostamble(action)
        end
    end
    
    local function dirAction(normal, up, down)
        return function(side, reverse, ...)
            local args = {...}
            if side then
                selectAction(turtleRotate, side)
                
                local result
                if side == "top" then
                    result = up(unpack(args))
                elseif side == "bottom" then
                    result = down(unpack(args))
                else
                    result = normal(unpack(args))
                end
                
                selectAction(turtleReverse, side)
                return result
            else
                return normal(unpack(args))
            end
        end
    end

    attack = dirAction(turtle.attack, turtle.attackUp, turtle.attackDown)
    place = dirAction(turtle.place, turtle.placeUp, turtle.placeDown)
    dig = dirAction(turtle.dig, turtle.digUp, turtle.digDown)
    drop = dirAction(turtle.drop, turtle.dropUp, turtle.dropDown)
    suck = dirAction(turtle.suck, turtle.suckUp, turtle.suckDown)
    detect = dirAction(turtle.detect, turtle.detectUp, turtle.detectDown)
    compare = dirAction(turtle.compare, turtle.compareUp, turtle.compareDown)
    
    function scanRedstone(dirs)
        local dirs = dirs or tags.DIRECTIONS
        for _,dir in pairs(dirs) do
            if redstone.getInput(dir) then
                return dir
            end
        end
    end
    
    function waitForRedstone(side)
        while true do
            os.pullEvent('redstone')
            if redstone.getInput(side) then
                break
            end
        end
    end
    
    t = turtle -- shortcut
    
    function orient(targetDir)
        local orientToIndex = {
            front = 0,
            right = 1,
            back = 2,
            left = 3
        }
    
        local indexToAction = {
            function() end,
            turtle.turnRight,
            twice(turtle.turnLeft),
            turtle.turnLeft
        }
    
        local targetIndex = orientToIndex[targetDir]
        if not targetIndex then
            error("Invalid direction: " .. targetDir)
        end
        
        local tagIndex = orientToIndex[tagDir]
        if tagIndex then
            local result = (tagIndex - targetIndex) % 4
            indexToAction[result + 1]()
        end
    end
    
    function restorePrev()
        holdPrev()
        prev()
    end
end

function setup_env()
    env = {}
    local newMetatable = {
        __index = function(t,n) return _G[n] end
    }
    
    setmetatable(env, newMetatable)
    setfenv(create_env, env)
    create_env(env)
    
    return env
end